using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using System.Linq;
using Newtonsoft.Json.Linq;

public class CPHInline
{
    private static HttpClient httpClient = new HttpClient();
    
    public bool Execute()
    {
        try
        {
            // Set Arguments auslesen
            string steamUserId = args.ContainsKey("steamUserId") ? args["steamUserId"].ToString() : "";
            string steamApiKey = args.ContainsKey("steamApiKey") ? args["steamApiKey"].ToString() : "";
            bool requireStreamLive = args.ContainsKey("requireStreamLive") ? bool.Parse(args["requireStreamLive"].ToString()) : false;
            bool enableChatMessages = args.ContainsKey("enableChatMessages") ? bool.Parse(args["enableChatMessages"].ToString()) : true;
            
            // Validierung der erforderlichen Parameter
            if (string.IsNullOrEmpty(steamUserId) || string.IsNullOrEmpty(steamApiKey))
            {
                CPH.LogWarn("‚ùå Steam User ID und Steam API Key sind erforderlich!");
                if (enableChatMessages)
                {
                    CPH.SendMessage("‚ùå Steam Konfiguration fehlt!");
                }
                return false;
            }
            
            // Stream-Status pr√ºfen falls erforderlich
            if (requireStreamLive)
            {
                bool isStreaming = CPH.ObsIsStreaming();
                if (!isStreaming)
                {
                    CPH.LogInfo("‚è∏Ô∏è Stream ist nicht live - Script pausiert");
                    return true;
                }
            }
            
            CPH.LogInfo($"üîç Intelligenter Game Category Check gestartet...");
            
            // Async Game Check starten
            Task.Run(() => IntelligentGameCheckAsync(steamUserId, steamApiKey, enableChatMessages));
            
            return true;
        }
        catch (Exception ex)
        {
            CPH.LogError($"‚ùå Fehler beim Initialisieren: {ex.Message}");
            return false;
        }
    }
    
    private async Task IntelligentGameCheckAsync(string steamUserId, string steamApiKey, bool enableChatMessages)
    {
        try
        {
            // 1. Aktuelles Steam-Spiel abrufen
            string currentSteamGame = await GetCurrentSteamGame(steamUserId, steamApiKey);
            
            if (string.IsNullOrEmpty(currentSteamGame))
            {
                CPH.LogInfo("‚ÑπÔ∏è Kein Steam-Spiel aktiv - keine Kategorie-√Ñnderung n√∂tig");
                return;
            }
            
            // 2. Pr√ºfen ob dieses Spiel bereits verarbeitet wurde
            if (IsGameAlreadyProcessed(currentSteamGame))
            {
                CPH.LogInfo($"‚è≠Ô∏è Spiel '{currentSteamGame}' bereits verarbeitet - √ºberspringe");
                return; // Kein Chat-Feedback bei bereits verarbeiteten Spielen
            }
            
            CPH.LogInfo($"üéÆ Steam-Spiel erkannt: {currentSteamGame}");
            
            // 3. Aktuelle Twitch-Kategorie abrufen
            string currentTwitchCategory = await GetCurrentTwitchCategory();
            
            if (string.IsNullOrEmpty(currentTwitchCategory))
            {
                CPH.LogWarn("‚ö†Ô∏è Konnte aktuelle Twitch-Kategorie nicht abrufen");
                currentTwitchCategory = "Unbekannt";
            }
            
            CPH.LogInfo($"üì∫ Aktuelle Twitch-Kategorie: {currentTwitchCategory}");
            
            // 4. Intelligenter Vergleich
            if (AreGamesEquivalent(currentSteamGame, currentTwitchCategory))
            {
                CPH.LogInfo($"‚úÖ Kategorie ist bereits korrekt: {currentTwitchCategory}");
                CPH.LogInfo("üìù Keine √Ñnderung erforderlich");
                
                // Spiel als verarbeitet markieren (bereits korrekte Kategorie)
                MarkGameAsProcessed(currentSteamGame);
                return;
            }
            
            // 5. Kategorie √§ndern da Unterschied erkannt
            CPH.LogInfo($"üîÑ Kategorie-√Ñnderung erforderlich:");
            CPH.LogInfo($"   Von: {currentTwitchCategory}");
            CPH.LogInfo($"   Zu:  {currentSteamGame}");
            
            bool success = SetTwitchCategory(currentSteamGame);
            
            // 6. Spiel als verarbeitet markieren (egal ob erfolgreich oder nicht)
            MarkGameAsProcessed(currentSteamGame);
            
            if (success)
            {
                CPH.LogInfo($"‚úÖ Twitch-Kategorie erfolgreich ge√§ndert ‚Üí {currentSteamGame}");
                
                if (enableChatMessages)
                {
                    CPH.SendMessage($"üéÆ Kategorie automatisch ge√§ndert ‚Üí {currentSteamGame}");
                }
            }
            else
            {
                CPH.LogError($"‚ùå Fehler beim √Ñndern der Twitch-Kategorie: {currentSteamGame}");
                
                if (enableChatMessages)
                {
                    CPH.SendMessage($"‚ùå Kategorie '{currentSteamGame}' konnte nicht gesetzt werden");
                }
            }
        }
        catch (Exception ex)
        {
            CPH.LogError($"‚ùå Fehler beim intelligenten Game Check: {ex.Message}");
        }
    }
    
    private bool IsGameAlreadyProcessed(string gameName)
    {
        try
        {
            // Lade das aktuell verarbeitete Spiel
            string currentProcessedGame = CPH.GetGlobalVar<string>("currentProcessedGame", false) ?? "";
            
            // Pr√ºfe ob das aktuelle Spiel bereits verarbeitet wurde
            if (string.Equals(currentProcessedGame, gameName, StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
            
            // Neues Spiel erkannt - gib das vorherige frei
            if (!string.IsNullOrEmpty(currentProcessedGame) && 
                !string.Equals(currentProcessedGame, gameName, StringComparison.OrdinalIgnoreCase))
            {
                CPH.LogInfo($"üîÑ Neues Spiel erkannt - gib '{currentProcessedGame}' frei f√ºr '{gameName}'");
                CPH.SetGlobalVar("currentProcessedGame", "", false); // Vorheriges Spiel freigeben
            }
            
            return false;
        }
        catch (Exception ex)
        {
            CPH.LogError($"‚ùå Fehler beim Pr√ºfen des verarbeiteten Spiels: {ex.Message}");
            return false;
        }
    }
    
    private void MarkGameAsProcessed(string gameName)
    {
        try
        {
            // Setze das aktuelle Spiel als verarbeitet
            CPH.SetGlobalVar("currentProcessedGame", gameName, false);
            CPH.LogInfo($"üìù Spiel '{gameName}' als aktuell verarbeitetes Spiel markiert");
        }
        catch (Exception ex)
        {
            CPH.LogError($"‚ùå Fehler beim Markieren des Spiels: {ex.Message}");
        }
    }
    
    private async Task<string> GetCurrentSteamGame(string steamUserId, string steamApiKey)
    {
        try
        {
            string url = $"https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key={steamApiKey}&steamids={steamUserId}";
            
            CPH.LogInfo($"üåê Steam API Aufruf f√ºr User: {steamUserId}");
            
            HttpResponseMessage response = await httpClient.GetAsync(url);
            string content = await response.Content.ReadAsStringAsync();
            
            if (!response.IsSuccessStatusCode)
            {
                CPH.LogError($"‚ùå Steam API Fehler: {response.StatusCode}");
                return null;
            }
            
            JObject jsonResponse = JObject.Parse(content);
            
            var players = jsonResponse["response"]?["players"];
            if (players != null && players.HasValues)
            {
                var player = players.First;
                var gameInfo = player["gameextrainfo"];
                
                if (gameInfo != null)
                {
                    return gameInfo.ToString();
                }
            }
            
            return null;
        }
        catch (Exception ex)
        {
            CPH.LogError($"‚ùå Fehler beim Steam API Aufruf: {ex.Message}");
            return null;
        }
    }
    
    private async Task<string> GetCurrentTwitchCategory()
    {
        try
        {
            // Versuche aus Global Variables zu lesen (falls verf√ºgbar)
            string cachedCategory = CPH.GetGlobalVar<string>("currentTwitchCategory", false) ?? "";
            
            // Da StreamerBot noch keine native GetChannelInfo Methode hat,
            // verwenden wir direkte Twitch API Abfrage
            string category = await GetTwitchCategoryViaAPI();
            
            if (!string.IsNullOrEmpty(category))
            {
                // Cache f√ºr n√§chsten Aufruf
                CPH.SetGlobalVar("currentTwitchCategory", category, false);
                return category;
            }
            
            // Fallback auf gecachte Version
            if (!string.IsNullOrEmpty(cachedCategory))
            {
                CPH.LogInfo("üì¶ Verwende gecachte Twitch-Kategorie");
                return cachedCategory;
            }
            
            return null;
        }
        catch (Exception ex)
        {
            CPH.LogError($"‚ùå Fehler beim Abrufen der Twitch-Kategorie: {ex.Message}");
            return null;
        }
    }
    
    private async Task<string> GetTwitchCategoryViaAPI()
    {
        try
        {
            // Hier w√ºrde eine direkte Twitch API Abfrage stehen
            // Da wir StreamerBot's Token-System nutzen m√ºssen, verwenden wir eine einfachere L√∂sung
            CPH.LogInfo("üîç Pr√ºfe Twitch-Kategorie...");
            
            // Placeholder - in einer echten Implementierung w√ºrde hier die Twitch API aufgerufen
            // return await CallTwitchChannelAPI();
            
            return null; // Wird durch Fallback-Logic gehandelt
        }
        catch (Exception ex)
        {
            CPH.LogError($"‚ùå Twitch API Aufruf fehlgeschlagen: {ex.Message}");
            return null;
        }
    }
    
    private bool AreGamesEquivalent(string steamGame, string twitchCategory)
    {
        if (string.IsNullOrEmpty(steamGame) || string.IsNullOrEmpty(twitchCategory))
            return false;
        
        // Direkte √úbereinstimmung
        if (steamGame.Equals(twitchCategory, StringComparison.OrdinalIgnoreCase))
            return true;
        
        // Bekannte Spiel-Aliase und Variationen
        var gameAliases = new Dictionary<string, string[]>(StringComparer.OrdinalIgnoreCase)
        {
            { "Counter-Strike 2", new[] { "CS2", "Counter Strike 2", "CS:2" } },
            { "Grand Theft Auto V", new[] { "GTA V", "GTA 5", "GTA5" } },
            { "Call of Duty: Modern Warfare III", new[] { "MW3", "Modern Warfare 3", "COD MW3" } },
            { "Apex Legends", new[] { "Apex" } },
            { "League of Legends", new[] { "LoL", "League" } },
            { "Rocket League", new[] { "RL" } },
            { "World of Warcraft", new[] { "WoW" } },
            { "Overwatch 2", new[] { "OW2", "Overwatch" } }
        };
        
        // Pr√ºfe Aliase in beide Richtungen
        foreach (var entry in gameAliases)
        {
            string mainName = entry.Key;
            string[] aliases = entry.Value;
            
            // Steam -> Twitch
            if (steamGame.Equals(mainName, StringComparison.OrdinalIgnoreCase))
            {
                if (ContainsIgnoreCase(aliases, twitchCategory))
                    return true;
            }
            
            // Twitch -> Steam
            if (twitchCategory.Equals(mainName, StringComparison.OrdinalIgnoreCase))
            {
                if (ContainsIgnoreCase(aliases, steamGame))
                    return true;
            }
            
            // Alias -> Alias
            if (ContainsIgnoreCase(aliases, steamGame) && 
                ContainsIgnoreCase(aliases, twitchCategory))
                return true;
        }
        
        // Fuzzy-Matching f√ºr √§hnliche Namen
        if (AreNamesSimilar(steamGame, twitchCategory))
            return true;
        
        return false;
    }
    
    private bool AreNamesSimilar(string name1, string name2)
    {
        // Entferne h√§ufige Zus√§tze und normalisiere
        string clean1 = CleanGameName(name1);
        string clean2 = CleanGameName(name2);
        
        // Pr√ºfe ob einer im anderen enthalten ist (mindestens 5 Zeichen)
        if (clean1.Length >= 5 && clean2.Length >= 5)
        {
            if (clean1.IndexOf(clean2, StringComparison.OrdinalIgnoreCase) >= 0 ||
                clean2.IndexOf(clean1, StringComparison.OrdinalIgnoreCase) >= 0)
                return true;
        }
        
        return false;
    }
    
    private string CleanGameName(string name)
    {
        if (string.IsNullOrEmpty(name)) return "";
        
        // Entferne h√§ufige Zus√§tze
        string cleaned = name
            .Replace("‚Ñ¢", "")
            .Replace("¬Æ", "")
            .Replace("¬©", "")
            .Replace(": Remastered", "")
            .Replace(" - Definitive Edition", "")
            .Replace(" (Early Access)", "")
            .Replace(" Beta", "")
            .Trim();
        
        return cleaned;
    }
    
    private bool SetTwitchCategory(string gameName)
    {
        try
        {
            CPH.LogInfo($"üîß Setze Twitch-Kategorie: {gameName}");
            
            var gameInfo = CPH.SetChannelGame(gameName);
            
            if (gameInfo != null)
            {
                // Cache die neue Kategorie
                CPH.SetGlobalVar("currentTwitchCategory", gameName, false);
                
                CPH.LogInfo($"‚úÖ Kategorie erfolgreich gesetzt: {gameName} (ID: {gameInfo.Id})");
                return true;
            }
            else
            {
                CPH.LogWarn($"‚ö†Ô∏è Kategorie konnte nicht gesetzt werden: {gameName}");
                return false;
            }
        }
        catch (Exception ex)
        {
            CPH.LogError($"‚ùå Fehler beim Setzen der Kategorie: {ex.Message}");
            return false;
        }
    }
    
    private bool ContainsIgnoreCase(string[] array, string value)
    {
        if (array == null || string.IsNullOrEmpty(value))
            return false;
            
        foreach (string item in array)
        {
            if (string.Equals(item, value, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        return false;
    }
}
